<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:sUpdater.Controls"
                    x:Class="sUpdater.Controls.CustomListViewStyle">
    
    <!-- Default ListView Style, but with lost focus color set to blue -->
    <Style x:Key="DisableItemLostFocusColorStyle"  TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, 
            RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment,
            RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="{Binding BorderThickness, 
            RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush, 
            RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        
        <Setter Property="ContextMenu" Value="{DynamicResource itemContextMenu}" />

        <EventSetter Event="PreviewMouseRightButtonDown"
                     Handler="OnListViewItemPreviewMouseRightButtonDown"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#1F26A0DA"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#A826A0DA"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#3DDADADA"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FFDADADA"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#3D26A0DA"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF26A0DA"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="true"/>
                                <Condition Property="IsKeyboardFocused" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#3D26A0DA"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="BorderThickness" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderThickness" Value="{Binding BorderBrush, 
                                RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomListViewStyle" TargetType="ListView">
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="SelectionMode" Value="Multiple"/>
        <Setter Property="SelectedItem" Value="{Binding rightClickedItem, UpdateSourceTrigger=PropertyChanged}"/>

        <Setter Property="ItemContainerStyle" Value="{StaticResource ResourceKey=DisableItemLostFocusColorStyle}"/>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Height="50px" Tag="{Binding DataContext, RelativeSource={RelativeSource Self}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="checkColumn" Width="20px"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <CheckBox x:Name="checkBox" VerticalAlignment="Center"
                            IsChecked="{Binding Path=IsSelected, 
                                RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                            Grid.Column="0"/>

                        <StackPanel Grid.Column="1" Orientation="Vertical" Margin="5,0,0,0">
                            <Label FontSize="14" Content="{Binding Name}"/>
                            <Label Margin="0,-5,0,0" Content="{Binding DisplayedVersion}" Foreground="#8d8d8d"/>
                        </StackPanel>

                        <TextBlock x:Name="linkTextBlock" Grid.Column="3" Text="{Binding LinkText}"
                                   TextDecorations="Underline" Foreground="DarkBlue" 
                                   VerticalAlignment="Center"/>

                        <StackPanel Grid.Column="4" Orientation="Vertical" HorizontalAlignment="Right"
                            VerticalAlignment="Center">
                            <ProgressBar x:Name="progressBar"  Height="20px" Width="225px" Margin="0,10,0,0" 
                                Minimum="0" Maximum="100" Value="{Binding Progress}"/>
                            <Label Foreground="#00ba00" FontWeight="Bold" 
                                HorizontalAlignment="Center" Content="{Binding Status}"/>
                        </StackPanel>
                    </Grid>

                    <DataTemplate.Triggers>
                        <!-- Show and hide the checkColumn when the Checkbox property is changed -->
                        <DataTrigger Binding="{Binding Checkbox}" Value="True">
                            <Setter TargetName="checkColumn" Property="Width" Value="20px"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Checkbox}" Value="False">
                            <Setter TargetName="checkColumn" Property="Width" Value="0"/>
                        </DataTrigger>

                        <!-- Hide the progress bar if the Progress property is set to 0 or it is null -->
                        <DataTrigger Binding="{Binding Progress}" Value="0">
                            <Setter TargetName="progressBar" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Set the progress bar to the Indeterminate mode if the IsWaiting property is set to true -->
                        <DataTrigger Binding="{Binding IsWaiting}" Value="True">
                            <Setter TargetName="progressBar" Property="IsIndeterminate" Value="True"/>
                        </DataTrigger>

                        <!-- Hide the link textblock if the LinkTekst property is null -->
                        <DataTrigger Binding="{Binding LinkText}" Value="{x:Null}">
                            <Setter TargetName="linkTextBlock" Property="Visibility" Value="COllapsed"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>